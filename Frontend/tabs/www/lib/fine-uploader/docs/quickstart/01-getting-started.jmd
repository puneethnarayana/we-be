{% extends "_templates/base.html" %}
{% set page_title = "Getting Started" %}
{% block content %}
{% markdown %}
# Getting Started with Fine Uploader {: .page-header }

This tutorial will serve as a step-by-step walkthrough for getting starting with
Fine Uploader. It is geared towards those who have minimal experience with
Javascript, server-side concepts, or the web.

The tutorial is not comprehensive or meant to cover all aspects of Fine Uploader.
For more information, make sure to read through the list of features as well
as the API documentation.

### 1. Download

You can get Fine Uploader in the [downloads](http://fineuploader.com/downloads.html)
section. The download comes bundled with all required scripts and modules.

### 2. Decide which Fine Uploader to use

#### Modes
Fine Uploader comes with two different modes pertaining to the user interface.

##### [Core Mode](../modes/core.html)
The most basic Fine Uploader mode.  Core mode assumes that the developer will code their own UI
but still make use of Fine Uploader's API. Core mode is suggested for advanced developers
who wish to heavily customize the uploader's user interface. To use Core Mode:

```javascript
var uploader = new qq.FineUploaderBasic({/* options go here .... */});
```

##### [UI Mode](../modes/ui.html)
Inherits everything from Core mode. UI mode also comes with a fully functional
user interface which includes, but is not limited to: a default upload button,
progress bars, retry/cancel/delete buttons, proper display of error messages,
and more. UI mode is recommended for beginning developers or for those who
are pleased with the default Fine Uploader interface or can customize the default Fine Uploader
UI via CSS. To use UI Mode:

```javascript
var uploader = new qq.FineUploader({/* options go here ... */});
```

{{ alert(
"""If you are using Fine Uploader UI, you MUST include a template in your document/markup.  You can
use the `default.html` file in the `templates` directory bundled with the library and customize it as desired.  See the
[styling documentation page](../features/styling.html) for more details.""") }}


#### Endpoint Handlers

##### [Traditional](../endpoint_handlers/traditional.html)
To use the traditional endpoint handler, simply declare Fine Uploader as you
normally would.

##### [Amazon S3](../endpoint_handlers/amazon-s3.html)
Amazon's S3 is currently the most popular cloud service.
Fine Uploader comes with built in support that allows all files to be uploaded directly to S3 via the browser.
To make use of Fine Uploader S3:

```javascript
var uploader = new qq.s3.FineUploader({/* options go here ... */});
```

##### [Azure Blob Storage](../endpoint_handlers/azure.html)
Fine Uploader comes with built in support that allows all files to be uploaded directly to Azure via the browser.
To make use of Fine Uploader Azure:

```javascript
var uploader = new qq.azure.FineUploader({/* options go here ... */});
```
{{ alert("Fine Uploader Azure does not support IE9 and older.  This is due to the fact that Azure's API does
not allow files to be uploaded via multipart encoded POST requests, which is critical for IE9 and older support.
If you need to support IE9 and older, you will need to load/use Fine Uploader with its traditional endpoint
handler if the value of `qq.supportedFeatures.ajaxUploading` is `false`.") }}


#### Callbacks
Like many other JavaScript libraries, Fine Uploader implements a event system
that uses callbacks to execute user-provided functions at runtime, based on
specific events. These [events are listed here](../api/events.html).

Callbacks are defined in the `callbacks` option
property. The parameters for the callbacks are the same as listed in the
[documentation](../api/events.html).

**Example:**

```javascript
var uploader = new qq.FineUploader({
    // options
    callbacks: {
        onUpload: function (id, name) {
        },
        onSubmitted: function (id, name) {
        }
    }
});
```

### 3. Determine how you would like to import Fine Uploader

You have the following options available to pull Fine Uploader into your project:

1. CommonJS (`require`).
2. ES6 Modules (`import`).
3. Globally scoped (`<script src="...">`)

For more information on how you can load Fine Uploader into your project, please see the
[modules feature page](../features/modules.html).


Next, let's check out some of Fine Uploader's options.

Proceed by selecting either:

* [Traditional endpoint](02-setting_options.html)
* [Amazon S3 endpoint](02-setting_options-s3.html)
* [Azure Blob Storage endpoint](02-setting_options-azure.html)

{% endmarkdown %}
{% endblock %}
